/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import config.koneksi;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author lenovo
 */
public class data_kas extends javax.swing.JFrame {

    DefaultTableModel tableModel;
    data_kasManager data_kasManager;
    boolean sedangDiEdit = false;
    /**
     * Creates new form data_kas
     */
    public data_kas() {
        initComponents();
        data_kasManager = new data_kasManager();
        tampilDataTable();
    }

    private void tampilDataTable() {
        String[] kolom = {"ID", "Nama", "Kas"};
        tableModel = new DefaultTableModel(null, kolom);
        for (data_kasModel model : data_kasManager.tampilSemua()) {
            String[] row = new String[kolom.length];
            row[0] = String.valueOf(model.getId());
            row[1] = model.getNama();
            row[2] = model.getKas();
            tableModel.addRow(row);
        }
        tbl_kas.setModel(tableModel);
        tbl_kas.clearSelection();
    }
    
    private void refresh(){
        tampilDataTable();
        clearData();
        sedangDiEdit = false;
    }
    
    private void clearData() {
        txt_nama.setText("");
        txt_kas.setText("");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_kas = new javax.swing.JTable();
        kembali = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txt_nama = new javax.swing.JTextField();
        simpan = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txt_kas = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Data KAS");

        tbl_kas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl_kas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_kasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_kas);

        kembali.setText("Kembali");
        kembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kembaliActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Nama");

        simpan.setText("Simpan");
        simpan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                simpanMouseClicked(evt);
            }
        });

        refresh.setText("Refresh");
        refresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshMouseClicked(evt);
            }
        });

        jButton1.setText("Logout");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Kas");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(kembali))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refresh)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txt_nama, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                                .addComponent(simpan))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txt_kas, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kembali)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_nama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(simpan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_kas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refresh)
                    .addComponent(jButton1))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void kembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kembaliActionPerformed
        // TODO add your handling code here:
        dashboard dashboard = new dashboard();
        dashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_kembaliActionPerformed

    private void tbl_kasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_kasMouseClicked
        // TODO add your handling code here:
        sedangDiEdit = true;
        String id = (String) tbl_kas.getValueAt(tbl_kas.getSelectedRow(), 0);
        data_kasModel model = data_kasManager.byId(Integer.valueOf(id));
        txt_nama.setText(model.getNama());
        txt_kas.setText(model.getKas());
    }//GEN-LAST:event_tbl_kasMouseClicked

    private void simpanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_simpanMouseClicked
        // TODO add your handling code here:
        String nama = txt_nama.getText();
        String kas = txt_kas.getText();

        if (!nama.isEmpty() && !kas.isEmpty()) {
            if (sedangDiEdit) {
                String id = (String) tbl_kas.getValueAt(tbl_kas.getSelectedRow(), 0);
                data_kasManager.update(nama, kas, Integer.valueOf(id));
            } else {
                data_kasManager.insert(nama, kas);
            }
            tampilDataTable();
            clearData();  
            sedangDiEdit = false;
        } else {
            JOptionPane.showMessageDialog(null, "Tidak boleh ada yang kosong !");
        }
    }//GEN-LAST:event_simpanMouseClicked

    private void refreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshMouseClicked
        // TODO add your handling code here:
        refresh();
    }//GEN-LAST:event_refreshMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin logout?", "Logout", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(data_kas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(data_kas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(data_kas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(data_kas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new data_kas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton kembali;
    private javax.swing.JButton refresh;
    private javax.swing.JButton simpan;
    private javax.swing.JTable tbl_kas;
    private javax.swing.JTextField txt_kas;
    private javax.swing.JTextField txt_nama;
    // End of variables declaration//GEN-END:variables

    public class data_kasModel {
        private int id;
        private String nama;
        private String kas;

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getNama() {
            return nama;
        }

        public void setNama(String nama) {
            this.nama = nama;
        }

        public String getKas() {
            return kas;
        }

        public void setKas(String kas) {
            this.kas = kas;
        }
    }
    
    public class data_kasManager {
        private final Connection koneksiDatabase;

    public data_kasManager() {
        this.koneksiDatabase = koneksi.koneksiDB();
    }
    
    public List<data_kasModel> tampilSemua() {
    String namaTable = "tbl_datakas";
    String query = "SELECT * FROM " + namaTable;
    data_kasModel model;
    List<data_kasModel> list = new ArrayList<>();

    try (PreparedStatement preparedStatement = koneksiDatabase.prepareStatement(query)) {
        ResultSet hasilQuery = preparedStatement.executeQuery();

        while (hasilQuery.next()) {
            model = new data_kasModel();
            model.setId(hasilQuery.getInt("id"));
            model.setNama(hasilQuery.getString("nama"));
            model.setKas(hasilQuery.getString("kas"));
            list.add(model);
        }
        return list;
    } catch (SQLException ex) {
        ex.printStackTrace();
        return null;
    }
}


    public data_kasModel byId(int id){
    String namaTable = "tbl_datakas";
    String query = "SELECT * FROM " + namaTable + " WHERE id = ?";
    data_kasModel model = null;

    try (PreparedStatement preparedStatement = koneksiDatabase.prepareStatement(query)) {
        preparedStatement.setInt(1, id);
        ResultSet hasilQuery = preparedStatement.executeQuery();
        
        while (hasilQuery.next()) {
            model = new data_kasModel();
            model.setId(hasilQuery.getInt("id"));
            model.setNama(hasilQuery.getString("nama"));
            model.setKas(hasilQuery.getString("kas"));
        }            
        return model;
    } catch (SQLException ex) {
        ex.printStackTrace();
        return null;
    }
}
    
    
    public boolean insert(String nama, String kas) {
    try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_kelas", "root", "")) {
        String query = "INSERT INTO tbl_datakas (nama, kas) VALUES (?, ?)";

        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, nama);
            preparedStatement.setString(2, kas);

            preparedStatement.executeUpdate();
        }
    } catch (SQLException e) {
        e.printStackTrace();
        return false;
    }
    return true;
}
    
    public boolean update(String nama, String kas, int id) {
    String namaTable = "tbl_datakas";
    String query = "UPDATE " + namaTable + " SET `nama`=?, `kas`=? WHERE  `id`=?";
    
    try {
        PreparedStatement preparedStatement = koneksiDatabase.prepareStatement(query);
        preparedStatement.setString(1, nama);
        preparedStatement.setString(2, kas);
        preparedStatement.setInt(3, id);

        preparedStatement.executeUpdate();
        return true;
    } catch (SQLException ex) {
        ex.printStackTrace();
        return false;
    }
}
    }
}
